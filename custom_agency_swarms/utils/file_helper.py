import logging
import time
from datetime import datetime, timedelta
import openai


## FILE MANAGEMENT ##
def upload_file(client, file_path, purpose):
    logging.info(f"Uploading file: {file_path} for purpose: {purpose}")
    try:
        with open(file_path, "rb") as file_data:
            uploaded_file = client.files.create(file=file_data, purpose=purpose)
            file_id = uploaded_file.id
            logging.info(f"File uploaded successfully: {file_id}")
            return file_id
    except Exception as e:
        logging.error(f"Error uploading file: {e}")
        raise


def list_file_objs(client):
    logging.info("Listing all files...")
    try:
        file_objs = client.files.list().data
        logging.info("Files listed successfully.")
        return file_objs
    except Exception as e:
        logging.error(f"Error listing files: {e}")
        raise


def file_object_to_dict(file_obj):
    return {
        "id": file_obj.id,
        "object": file_obj.object,
        "bytes": file_obj.bytes,
        "created_at": file_obj.created_at,
        "filename": file_obj.filename,
        "purpose": file_obj.purpose,
    }


def format_file_objects(file_objs):
    return [file_object_to_dict(file_obj) for file_obj in file_objs]


def parse_file_objs(file_objs, fields=["id", "filename", "created_at"]):
    logging.info("Parsing file objects...")
    try:
        parsed_data = [
            {field: getattr(file_obj, field, None) for field in fields}
            for file_obj in file_objs
        ]
        logging.info(f"File fields parsed successfully: {fields}.")
        return parsed_data
    except Exception as e:
        logging.error(f"Error parsing file objects: {e}")
        raise


def parse_date(date_str):
    for fmt in ("%Y-%m-%d", "%Y-%m-%d %H:%M:%S"):
        try:
            return datetime.strptime(date_str, fmt)
        except ValueError:
            pass
    raise ValueError("Invalid date format. Use 'YYYY-MM-DD' or 'YYYY-MM-DD HH:MM:SS'")


def filter_files_by_date_range(file_objs, start_date, end_date):
    start_timestamp = int(start_date.timestamp())
    end_timestamp = int(end_date.timestamp())

    return [f for f in file_objs if start_timestamp <= f.created_at < end_timestamp]


def retrieve_file(client, file_id):
    """
    Can only download files that are generated by assistants or for fine-tuning purposes.
    """
    logging.info(f"Retrieving file with ID: {file_id}")
    try:
        file = client.files.retrieve(file_id)
        logging.info(f"File retrieved successfully: {file.id}")
        return file
    except Exception as e:
        logging.error(f"Error retrieving file: {e}")
        raise


def retrieve_file_content(client, file_id):
    logging.info(f"Retrieving content for file ID: {file_id}")
    try:
        content = client.files.retrieve_content(file_id)
        logging.info(f"Content retrieved for file ID: {file_id}")
        return content
    except openai.BadRequestError as e:
        logging.warning(f"Cannot download file of this type: {e}")
        return None  # or appropriate response indicating inability to download
    except Exception as e:
        logging.error(f"Error retrieving file content: {e}")
        raise


def delete_file(client, file_id):
    logging.info(f"Deleting file with ID: {file_id}")
    try:
        response = client.files.delete(file_id)
        if response.deleted:
            logging.info(f"File deleted successfully: {file_id}")
        else:
            logging.warning(f"Failed to delete file: {file_id}")
        return response
    except Exception as e:
        logging.error(f"Error deleting file: {e}")
        raise


def delete_files_batch(client, file_ids):
    results = {"deleted": [], "failed": []}
    for file_id in file_ids:
        try:
            response = delete_file(client, file_id)
            if response.deleted:
                results["deleted"].append(file_id)
            else:
                results["failed"].append(file_id)
        except Exception as e:
            results["failed"].append((file_id, str(e)))
    return results
